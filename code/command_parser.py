from openai import OpenAI
from pydantic import BaseModel, ValidationError
from typing import Optional
import json
import os

from speech_io import send_to_ui

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY", "sk-XX))

class RobotCommand(BaseModel):
    action: Optional[str]       = None
    distance_m: Optional[float] = None
    direction: Optional[str]    = None
    angle_deg: Optional[float]  = None
    duration_s: Optional[float] = None
    then: Optional[str]         = None
    error: Optional[str]        = None

COMMAND_GUIDE = """Sen 4 tekerli bir kara robotusun. Sana doÄŸal dilde komutlar verilecek ve bunlarÄ± tek bir JSON Ã§Ä±ktÄ±sÄ±na Ã§evireceksin.

Desteklenen eylemler:
- Belirli bir mesafe ileri veya geri gitmek (Ã¶rnek: "3 metre ileri git")
- Belirli bir sÃ¼re boyunca hareket etmek (Ã¶rnek: "3 saniye ileri git" â†’ bu, 3 saniye boyunca ileri gitmek anlamÄ±na gelir. 'wait' deÄŸil!)
- SaÄŸa veya sola dÃ¶nmek (Ã¶rnek: "saÄŸa dÃ¶n" â†’ yÃ¶n ve varsayÄ±lan 90 derece ile)
- Derece ile dÃ¶nmek (Ã¶rnek: "90 derece sola dÃ¶n", "180 derece saÄŸa dÃ¶n")
- Engel gÃ¶rene kadar ilerlemek (Ã¶rnek: "engel gÃ¶rene kadar ilerle")
- Durmak (Ã¶rnek: "dur")
- Belirli bir sÃ¼re beklemek (Ã¶rnek: "5 saniye bekle")
- Zincirleme komutlar (Ã¶rnek: "5 metre ileri git sonra 90 derece sola dÃ¶n sonra 2 saniye bekle")

Notlar:
- EÄŸer kullanÄ±cÄ± "3 saniye ileri git" derse, bunu {"action": "move_forward", "duration_s": 3} olarak dÃ¶ndÃ¼r.
- TÃ¼m dÃ¶nme iÅŸlemlerinde "angle_deg" alanÄ± kullanÄ±lmalÄ± (Ã¶rnek: 90 derece).
- Her komutu ayrÄ± bir JSON objesi olarak ve sÄ±rayla dÃ¶ndÃ¼r. Liste formatÄ±nda ver.
- Santimetre ile hareket istendiÄŸinde onu metreye Ã§evirip uygula Ã¶rnegin 50 santimetre 0.5 metre gibi.(santim, cm gibi terimlerin de santimetre demek olduÄŸunu unutma)
- Geri dÃ¶n veya geri git gibi komutlar geldiÄŸinde 180 derece sola dÃ¶ndÃ¼kten sonra komutu uygulasÄ±n. (Ã–rnek: 3 saniye geri git dediÄŸinde Ã¶nce 180 derece sola dÃ¶nsÃ¼n ardÄ±ndan 3 saniye ileri gitsin.)

GeÃ§erli JSON Ã¶rnekleri:
{
  "action": "move_forward",
  "distance_m": 3
}
{
  "action": "move_forward",
  "duration_s": 3
}
{
  "action": "turn",
  "direction": "left",
  "angle_deg": 90
}
{
  "action": "move_until_obstacle"
}

Desteklenmeyen bir komut gelirse, ÅŸu yapÄ±da aÃ§Ä±klayÄ±cÄ± hata dÃ¶ndÃ¼r:
{"error": "<neden yapÄ±lamadÄ±ÄŸÄ±>"}

Ã–rnek:
- "uÃ§" â†’ {"error": "UÃ§amam Ã§Ã¼nkÃ¼ uÃ§ma yeteneÄŸim yok."}
- "kamerayÄ± aÃ§" â†’ {"error": "Kamera aÃ§amam Ã§Ã¼nkÃ¼ kameram yok."}

SADECE JSON dÃ¶ndÃ¼r. BaÅŸka metin veya aÃ§Ä±klama ekleme."""

def komutu_jsona_cevir(komut: str) -> dict:
    prompt = COMMAND_GUIDE + f"\nKomut: {komut}\nÃ‡Ä±ktÄ±:"
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Sen bir robot komut Ã§eviricisisin."},
            {"role": "user",   "content": prompt}
        ],
        temperature=0.2
    )
    json_str = response.choices[0].message.content
    try:
        result = json.loads(json_str)
        if not isinstance(result, dict) and not isinstance(result, list):
            return {"error": "GeÃ§ersiz JSON formatÄ±"}
        return result
    except json.JSONDecodeError:
        return {"error": "GeÃ§ersiz JSON Ã§Ä±ktÄ±"}


def komutu_dogrula(json_data: dict, dosya_yolu="komut_ciktisi.txt"):
    try:
        if isinstance(json_data, list):
            dogru_komutlar = []
            for item in json_data:
                komut = RobotCommand(**item)
                if komut.error:
                    print(f"ğŸš« Robot bunu yapamaz: {komut.error}")
                else:
                    dogru_komutlar.append(komut.model_dump(exclude_none=True))
            if dogru_komutlar:
                print("âœ… GeÃ§erli komut alÄ±ndÄ±:")
                print(json.dumps(dogru_komutlar, indent=2, ensure_ascii=False))
                with open(dosya_yolu, "w", encoding="utf-8") as f:
                    f.write(json.dumps(dogru_komutlar, indent=2, ensure_ascii=False))
        else:
            komut = RobotCommand(**json_data)
            if komut.error:
                print(f"ğŸš« Robot bunu yapamaz: {komut.error}")
                with open(dosya_yolu, "w", encoding="utf-8") as f:
                    f.write(json.dumps({"error": komut.error}, indent=2, ensure_ascii=False))
            else:
                print("âœ… GeÃ§erli komut alÄ±ndÄ±:")
                veri = komut.model_dump(exclude_none=True)
                print(json.dumps(veri, indent=2, ensure_ascii=False))
                with open(dosya_yolu, "w", encoding="utf-8") as f:
                    f.write(json.dumps(veri, indent=2, ensure_ascii=False))
    except ValidationError as e:
        print("â›” JSON doÄŸrulanamadÄ±:\n", e)
        with open(dosya_yolu, "w", encoding="utf-8") as f:
            f.write(json.dumps({"error": "DoÄŸrulama hatasÄ±"}, indent=2, ensure_ascii=False))
